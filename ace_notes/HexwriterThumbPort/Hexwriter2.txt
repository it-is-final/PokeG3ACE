Proper state of registers:

 r0: 02020700   r1: 0206FFFF   r2: 00000010   r3: 00000000
 r4: 02020700   r5: 0202073E   r6: 00000005   r7: 00000001
 r8: 00000000   r9: 00000000  r10: 00000000  r11: 00000000
r12: 00000040  r13: 03007E04  r14: 080066FF  r15: 02070002


; r12 is used to store destination address, value is manipulated in r1

PUSH {r2-r6} ; Do not touch r7! Value will be used later
ADD r2, pc, #0xE0
CMP r12, r4
LDMIA r2!, {r3-r5}
BCS #0x6
ADD r1, pc, #0x44
B #0x4
MOV r1, r12
B #0x4
LDRB r6, [r2, r3] ; load box character
SUB r6, #0xB1 ; r6 = F0 - F9 for '0'-'9', A-F for 'A' to 'F'
BCS #0x4 ; if char is not '0' to '9'
ADD r6, #0x10 ; Fix hex representation for char '0' to '9'
BPL #0x4
LDRB r5, [r1] ; Effectively a skip
BMI #0x6
LSL r5, r5, #0x4
ADD r5, r5, r6 ; r5 = byte to be written
TST r4, r7 ; r7 should = 1
BEQ #0x8 ; only write on even box char!
STRB r5, [r1]
ADD r1, r1, #0x1 ; Equivalent to STRBNE r5, [r1], #0x1
EOR r5, r5
CMP r4, #0x7
BCS #0x6
ADD r4, r4, #0x1
B #0x6
EOR r4, r4
ADD r3, r3, #0x1 ; Skip 0xFF terminator
ADD r3, r3, #0x1
CMP r3, #0x7E
BMI #-nn ; Return to LDRB r1, [r0, r2] until all writable box name chars exhausted
POP {r2-r6} ; Restore registers
BX r0 ; Jump to next routine (exit code or Thumb Hexecutor second part)

7C B4 38 A2   A4 45 38 CA
00 D2 11 A1   00 E0 61 46
00 E0 00 07   D6 5C B1 3E
00 D2 10 36   00 D5 0D 78
01 D4 2D 01   AD 19 3C 42
02 D0 0D 70   49 1C 6D 40
07 2C 01 D2   64 1C 01 E0
64 40 5B 1C   5B 1C 7E 2B
E8 D4 7C BC   00 47 00 00
00 00 00 00   00 00 00 00
