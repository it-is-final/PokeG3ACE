PUSH {r2}
ADD r2, pc, #0x8
ADD r2, #0x3
LDR r7, [pc, #0x2C] ; Set writing destination
B #0x42

; Executed by BX r2
POP {r0} ; Preserve original Hexecutor behaviour of r0=exit
PUSH {r1-r2}
LDR r2, [pc, #nn]
MOV r1, #0xF0
LSL r1, r1, #0x14
TST r2, r1
BNE #0x4
ADD r7, #0x1 ; Allows Thumb execution
POP {r1-r2}
MOV r1, pc
SUB r1, #0x2E ; sets r1 to start of Hexecutor data
ADD r7, r7, #0x0 ; Fix CPSR
BX r7 ; Only usable due to the way the Thumb Hexwriter was implemented (r7's original value was preserved by PUSH {r1-r4, r7})
; 0x203FA00

; Notes
; - By default, the code will be executed in Thumb mode
; - However marking the bad egg will make the code be executed in ARM mode
; - The PC is aligned, PC-relative operations will be like VBA emulation
; - The CPSR is unset, just like regular ACE

; B404
; A201
; 3201
; 4F00
; E000
; BC01
; B404
; 4A00
; 21F0
; 0509
; 420A
; D100
; 3701
; BC04
; 4679
; 392E
; 1C00
; 4738

04 B4 01 A2   03 32 09 4F
22 E0 01 BC   06 B4 02 4A
00 E0 00 07   F0 21 09 05
00 E0 00 00   0A 42 00 D1
01 37 06 BC   79 46 2E 39
3F 1C 38 47   00 FA 03 02
00 00 00 00   00 00 00 00
00 00 00 00   00 00 00 00
00 00 00 00   00 00 00 00
00 00 00 00   00 00 00 00
